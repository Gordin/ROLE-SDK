<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	<display-name>ROLE-Space</display-name>

	<!--
	<context-param>
		<param-name>javax.servlet.jsp.jstl.fmt.localizationContext</param-name>
		<param-value>resources.application</param-value>
	</context-param>
	<context-param>
		<description>
		State saving method: 'client' or 'server' (=default). See JSF Specification 2.5.2</description>
		<param-name>javax.faces.STATE_SAVING_METHOD</param-name>
		<param-value>client</param-value>
	</context-param>
	<context-param>
		<description>
		
	This parameter tells MyFaces if javascript code should be allowed in
	the rendered HTML output.
	If javascript is allowed, command_link anchors will have javascript code
	that submits the corresponding form.
	If javascript is not allowed, the state saving info and nested parameters
	will be added as url parameters.
	Default is 'true'</description>
		<param-name>org.apache.myfaces.ALLOW_JAVASCRIPT</param-name>
		<param-value>true</param-value>
	</context-param>
	<context-param>
		<description>
		
	If true, rendered HTML code will be formatted, so that it is 'human-readable'
	i.e. additional line separators and whitespace will be written, that do not
	influence the HTML code.
	Default is 'true'</description>
		<param-name>org.apache.myfaces.PRETTY_HTML</param-name>
		<param-value>true</param-value>
	</context-param>
	<context-param>
		<param-name>org.apache.myfaces.DETECT_JAVASCRIPT</param-name>
		<param-value>false</param-value>
	</context-param>
	<context-param>
		<description>
		
	If true, a javascript function will be rendered that is able to restore the
	former vertical scroll on every request. Convenient feature if you have pages
	with long lists and you do not want the browser page to always jump to the top
	if you trigger a link or button action that stays on the same page.
	Default is 'false'
</description>
		<param-name>org.apache.myfaces.AUTO_SCROLL</param-name>
		<param-value>true</param-value>
	</context-param>
	<listener>
		<listener-class>org.apache.myfaces.webapp.StartupServletContextListener</listener-class>
	</listener>
	<servlet>
		<servlet-name>Faces Servlet</servlet-name>
		<servlet-class>
		javax.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet>
		<servlet-name>faces</servlet-name>
		<servlet-class>
		org.apache.myfaces.webapp.MyFacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>/faces/*</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>faces</servlet-name>
		<url-pattern>*.jsf</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>faces</servlet-name>
		<url-pattern>*.faces</url-pattern>
	</servlet-mapping>
	-->

	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>

  <!-- configuration -->
  <!-- If you have your own Guice module(s), put them here as a colon-separated list. -->
  <context-param>
    <param-name>guice-modules</param-name>
    <param-value>
      org.apache.shindig.common.PropertiesModule:
      org.apache.shindig.gadgets.DefaultGuiceModule:
      org.apache.shindig.social.core.config.SocialApiGuiceModule:
      org.apache.shindig.social.sample.SampleModule:
      org.apache.shindig.gadgets.oauth.OAuthModule:
      org.apache.shindig.common.cache.ehcache.EhCacheModule:
      org.apache.shindig.sample.shiro.ShiroGuiceModule:
      org.apache.shindig.sample.container.SampleContainerGuiceModule:
      org.apache.shindig.extras.ShindigExtrasGuiceModule:
      org.apache.shindig.extras.as.ActivityStreamsGuiceModule
    </param-value>
  </context-param>

  <!-- 
  Syntax: <key>=<value> separated by a newline
  
  system.properties specifies the environmental variables that will be set to the JVM System Properties at server startup time.
  Alternatively, you may add these values in your app server (ex: Tomcat) as
  VM arguments like this: -Dshindig.host="my.production.shindig.server.com".
  
  Here are a few properties that can be set for Shindig:
  shindig.host: the server name that Shindig is deployed and running on
  shindig.port: the port number of shindig.host server
  
  Make sure you escape all HTML values for the web.xml to be parsed correctly.
  --> 
  <!--<context-param> 
  	<param-name>system.properties</param-name> 
     <param-value> 
    	shindig.host=role-is.dbis.rwth-aachen.de
    	
    	aKey=/shindig/gadgets/proxy?container=default&amp;url=
    	shindig.port=80
    	
     </param-value> 
  </context-param>-->  
 
    <filter> 
        <filter-name>ShiroFilter</filter-name> 
        <filter-class>org.apache.shiro.web.servlet.IniShiroFilter</filter-class> 
        <init-param> 
            <param-name>config</param-name> 
            <param-value> 
                # The ShiroFilter configuration is very powerful and flexible, while still remaining succinct.
                # Please read the comprehensive example, with full comments and explanations, in the JavaDoc:
                #
                # http://www.jsecurity.org/api/org/jsecurity/web/servlet/JSecurityFilter.html
                [main]
                shindigSampleRealm = org.apache.shindig.sample.shiro.SampleShiroRealm
                securityManager.realm = $shindigSampleRealm
                authc.loginUrl = /login.jsp
 
                [urls]
                # The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
                # the 'authc' filter must still be specified for it so it can process that url's
                # login submissions. It is 'smart' enough to allow those requests through as specified by the
                # shiro.loginUrl above.
                /login.jsp = authc
 
                /oauth/authorize/** = authc
 
            </param-value> 
        </init-param> 
    </filter> 
 
  <filter> 
    <filter-name>authFilter</filter-name> 
    <filter-class>org.apache.shindig.auth.AuthenticationServletFilter</filter-class> 
  </filter> 
 
 
  <filter-mapping> 
      <filter-name>ShiroFilter</filter-name> 
      <url-pattern>/oauth/authorize</url-pattern> 
  </filter-mapping> 
 
  <filter-mapping> 
      <filter-name>ShiroFilter</filter-name> 
      <url-pattern>*.jsp</url-pattern> 
  </filter-mapping> 
 
  <filter-mapping> 
    <filter-name>authFilter</filter-name> 
    <url-pattern>/social/*</url-pattern> 
    <url-pattern>/gadgets/ifr</url-pattern> 
    <url-pattern>/gadgets/makeRequest</url-pattern> 
    <url-pattern>/gadgets/api/rpc/*</url-pattern> 
    <url-pattern>/gadgets/api/rest/*</url-pattern> 
    <url-pattern>/rpc/*</url-pattern> 
    <url-pattern>/rest/*</url-pattern> 
  </filter-mapping> 
 
  <listener> 
    <listener-class>org.apache.shindig.common.servlet.GuiceServletContextListener</listener-class> 
  </listener> 
 
  <!-- Render a Gadget --> 
  <servlet> 
    <servlet-name>xml-to-html</servlet-name> 
    <servlet-class> 
      org.apache.shindig.gadgets.servlet.GadgetRenderingServlet
    </servlet-class> 
  </servlet> 
 
  <servlet> 
    <servlet-name>accel</servlet-name> 
    <servlet-class> 
      org.apache.shindig.gadgets.servlet.HtmlAccelServlet
    </servlet-class> 
  </servlet> 
 
  <!-- Proxy --> 
  <servlet> 
    <servlet-name>proxy</servlet-name> 
    <servlet-class> 
      org.apache.shindig.gadgets.servlet.ProxyServlet
    </servlet-class> 
  </servlet> 
 
  <!-- makeRequest --> 
  <servlet> 
    <servlet-name>makeRequest</servlet-name> 
    <servlet-class> 
      org.apache.shindig.gadgets.servlet.MakeRequestServlet
    </servlet-class> 
  </servlet> 
 
  <!-- Concat --> 
  <servlet> 
    <servlet-name>concat</servlet-name> 
    <servlet-class> 
      org.apache.shindig.gadgets.servlet.ConcatProxyServlet
    </servlet-class> 
  </servlet> 
 
  <!-- OAuth callback --> 
  <servlet> 
    <servlet-name>oauthCallback</servlet-name> 
    <servlet-class> 
      org.apache.shindig.gadgets.servlet.OAuthCallbackServlet
    </servlet-class> 
  </servlet> 
 
  <!-- Metadata RPC --> 
  <servlet> 
    <servlet-name>metadata</servlet-name> 
    <servlet-class> 
      org.apache.shindig.gadgets.servlet.RpcServlet
    </servlet-class> 
  </servlet> 
 
  <!-- javascript serving --> 
  <servlet> 
    <servlet-name>js</servlet-name> 
    <servlet-class>org.apache.shindig.gadgets.servlet.JsServlet</servlet-class> 
  </servlet> 
 
  <servlet> 
    <servlet-name>restapiServlet</servlet-name> 
    <servlet-class> 
      org.apache.shindig.protocol.DataServiceServlet
    </servlet-class> 
    <init-param> 
      <param-name>handlers</param-name> 
      <param-value>org.apache.shindig.handlers</param-value> 
    </init-param> 
  </servlet> 
 
  <!-- Serve social RPC api --> 
  <servlet> 
    <servlet-name>jsonRpcServlet</servlet-name> 
    <servlet-class> 
      org.apache.shindig.protocol.JsonRpcServlet
    </servlet-class> 
    <init-param> 
      <param-name>handlers</param-name> 
      <param-value>org.apache.shindig.handlers</param-value> 
    </init-param> 
  </servlet> 
 
  <!-- Serve sample OAuth apis --> 
  <servlet> 
    <servlet-name>sampleOAuth</servlet-name> 
    <servlet-class> 
      org.apache.shindig.social.sample.oauth.SampleOAuthServlet
    </servlet-class> 
  </servlet> 
 
  <servlet-mapping> 
    <servlet-name>js</servlet-name> 
    <url-pattern>/gadgets/js/*</url-pattern> 
  </servlet-mapping> 
 
  <servlet-mapping> 
    <servlet-name>proxy</servlet-name> 
    <url-pattern>/gadgets/proxy/*</url-pattern> 
  </servlet-mapping> 
 
  <servlet-mapping> 
    <servlet-name>makeRequest</servlet-name> 
    <url-pattern>/gadgets/makeRequest</url-pattern> 
  </servlet-mapping> 
 
  <servlet-mapping> 
    <servlet-name>jsonRpcServlet</servlet-name> 
    <url-pattern>/rpc/*</url-pattern> 
    <url-pattern>/gadgets/api/rpc/*</url-pattern> 
    <url-pattern>/social/rpc/*</url-pattern> 
  </servlet-mapping> 
 
  <servlet-mapping> 
    <servlet-name>restapiServlet</servlet-name> 
    <url-pattern>/rest/*</url-pattern> 
    <url-pattern>/gadgets/api/rest/*</url-pattern> 
    <url-pattern>/social/rest/*</url-pattern> 
  </servlet-mapping> 
 
  <servlet-mapping> 
    <servlet-name>concat</servlet-name> 
    <url-pattern>/gadgets/concat</url-pattern> 
  </servlet-mapping> 
 
  <servlet-mapping> 
    <servlet-name>oauthCallback</servlet-name> 
    <url-pattern>/gadgets/oauthcallback</url-pattern> 
  </servlet-mapping> 
 
  <servlet-mapping> 
    <servlet-name>xml-to-html</servlet-name> 
    <url-pattern>/gadgets/ifr</url-pattern> 
  </servlet-mapping> 
 
  <servlet-mapping> 
    <servlet-name>accel</servlet-name> 
    <url-pattern>/gadgets/accel</url-pattern> 
  </servlet-mapping> 
 
  <servlet-mapping> 
    <servlet-name>metadata</servlet-name> 
    <url-pattern>/gadgets/metadata</url-pattern> 
  </servlet-mapping> 
 
  <servlet-mapping> 
    <servlet-name>sampleOAuth</servlet-name> 
    <url-pattern>/oauth/*</url-pattern> 
  </servlet-mapping>

</web-app>
